generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "sqlite" / "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String  @id @default(cuid())
  title       String
  description String
  edition     String?
  type        String
  price       Int
  amount      Int
  image       String
}

model Profil {
  id      String @id @default(cuid())
  user_id String @unique
  name    String
  country String
  adress  String
  cp      Int
  city    String
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Offers {
  id          String   @id @default(cuid())
  user_id     String
  title       String
  description String
  tracknumber String?
  price       Int
  status      String   @default("waiting") // waiting = en attente / success = Approuvé / deny = Refusée
  image       String[]
  created_at  DateTime @default(now()) // Assigne automatiquement la date à laquelle l'offre a été créée
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  admin         Int       @default(0)
  points        Int       @default(0)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
